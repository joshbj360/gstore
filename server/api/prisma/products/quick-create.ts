import prisma from '~/server/prisma/prismaClient';
import { serverSupabaseUser } from '#supabase/server';
import { z } from 'zod';
import { ProductStatus } from '@prisma/client';
import Store_slug from '~/pages/seller/profile/[store_slug].vue';

const quickProductSchema = z.object({
  title: z.string().min(1, "Title is required."),
  price: z.number().positive("Price must be a positive number."),
  categoryName: z.string().min(1, "Category is required."),
  media: z.array(z.object({
    url: z.string().url(),
    public_id: z.string(),
    type: z.string(),
    width: z.number().optional().nullable(),
    height: z.number().optional().nullable(),
  })).min(1, "At least one media file is required."),
});

export default defineEventHandler(async (event) => {
    const user = await serverSupabaseUser(event);
    if (!user) throw createError({ statusCode: 401, message: 'Unauthorized' });

    const sellerProfile = await prisma.sellerProfile.findUnique({ where: { profileId: user.id } });
    if (!sellerProfile) throw createError({ statusCode: 403, message: 'Seller profile not found.' });

    const body = await readValidatedBody(event, body => quickProductSchema.safeParse(body));
    if (!body.success) {
        throw createError({ statusCode: 400, message: body.error.issues.map(i => i.message).join(', ') });
    }
    const { title, price, categoryName, media } = body.data;

    try {
        const newProduct = await prisma.products.create({
            data: {
                title: title,
                price: price,
                sellerId: sellerProfile.id,
                slug: '', // Will be generated by the Prisma extension
                status: 'PUBLISHED', // Quick-add products go live immediately
                Store_slug: sellerProfile.store_slug,
                category: {
                    create: [{
                        category: {
                            connectOrCreate: {
                                where: { name: categoryName },
                                create: { name: categoryName, slug: categoryName.toLowerCase().replace(/\s+/g, '-') }
                            }
                        }
                    }]
                },
                variants: {
                    create: [{
                        size: 'One Size',
                        stock: 1, // Default stock
                        price: price
                    }]
                },
                media: {
                    create: media.map(m => ({
                        url: m.url,
                        public_id: m.public_id,
                        type: m.type as any,
                        metadata: { width: m.width, height: m.height },
                        authorId: user.id,
                        sellerId: sellerProfile.id,
                    }))
                }
            },
            include: {
                media: true,
                variants: true
            }
        });
        return newProduct;
    } catch (error: any) {
        console.error("Error creating quick product:", error);
        throw createError({ statusCode: 500, message: 'Failed to create product.' });
    }
});
