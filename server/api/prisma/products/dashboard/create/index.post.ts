import prisma from '~/server/prisma/prismaClient';
import { serverSupabaseUser } from '#supabase/server';
import { z } from 'zod';
import type { EMediaType, IProduct } from '~/models';
import { fa } from 'zod/v4/locales';

// The Zod schema is correct. It defines how we receive the data from the client.
const productCreateSchema = z.object({
    title: z.string().min(3, 'Title must be at least 3 characters long.'),
    description: z.string().optional(),
    price: z.number().positive('Price must be a positive number.'),
    discount: z.number().optional().nullable(),
    shippingZoneId: z.string().uuid('A valid shipping profile is required.'),
    media: z.array(z.object({
        url: z.string().url(),
        type: z.string(),
        public_id: z.string(),
        width: z.number().optional(),
        height: z.number().optional(),
        altText: z.string().optional()
    })).min(1, "At least one media file is required."),
    isAccessory: z.boolean().optional()
});

export default defineEventHandler(async (event) => {
    const user = await serverSupabaseUser(event);
    if (!user) throw createError({ statusCode: 401, message: 'Unauthorized' });

    const sellerProfile = await prisma.sellerProfile.findUnique({ where: { profileId: user.id } });
    if (!sellerProfile) throw createError({ statusCode: 403, message: 'Seller profile not found.' });

    const validation = await readValidatedBody(event, body => productCreateSchema.safeParse(body));
    if (!validation.success) {
        throw createError({ 
            statusCode: 400, 
            statusMessage: 'Invalid product data',
            message: validation.error.issues.map(i => i.message).join(', ')
        });
    }

    const body = validation.data;

    try {
        const product = await prisma.products.create({
                data: {
                    title: body.title,
                    description: body.description,
                    price: body.price,
                    discount: body.discount,
                    sellerId: sellerProfile.id,
                    store_slug: sellerProfile.store_slug,
                    shippingZoneId: body.shippingZoneId,
                    isAccessory: body.isAccessory || false,
                    SKU: `SKU-${Math.random().toString(36).substring(2, 8).toUpperCase()}`, // Simple SKU generation
                    slug: '', // Dummy value, will be generated by the Prisma extension
                    media: {
                        create: body.media.map(mediaItem => ({
                            url: mediaItem.url,
                            type: mediaItem.type as EMediaType,
                            public_id: mediaItem.public_id,
                            metadata: { width: mediaItem.width, height: mediaItem.height },
                            sellerId: sellerProfile.id,
                            authorId: user.id,
                            altText: `${body.title} image`
                        }))
                    }
                }
            })


            // Return the full product with all its new relations
            return product

    } catch (error: any) {
        console.error("Error creating product:", error);
        throw createError({ statusCode: 500, message: error.message || 'Failed to create product.' });
    }
});

