generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String            @id @db.Uuid
  email         String            @unique
  role          String            @default("user")
  avatar        String?
  username      String?
  created_at    DateTime          @default(now()) @db.Timestamptz(6)
  updated_at    DateTime          @updatedAt @db.Timestamptz(6)
  likes         Like[]            @relation("ProfileLikes")
  notifications Notification[]    @relation("NotificationToProfile")
  products      Products[]        @relation("SellerProducts")
  reviews       Review[]          @relation("UserReviews")
  sellerProfile SellerProfile?    @relation("SellerProfile")
  shares        Share[]           @relation("ProfileShares")
  socialMedia   SocialMediaInfo[] @relation("ProfileSocialMedia")
}

model SellerProfile {
  id                    String                 @id @default(uuid()) @db.Uuid
  profileId             String                 @unique @db.Uuid
  store_name            String?
  store_description     String?
  store_logo            String?
  store_banner          String?
  store_location        String?
  store_phone           String?
  store_website         String?
  store_socials         Json?
  followers_count       Int                    @default(0)
  is_verified           Boolean                @default(false)
  verification_status   VerificationStatus     @default(PENDING)
  verification_reason   String?
  created_at            DateTime               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime               @updatedAt @db.Timestamptz(6)
  store_slug            String                 @unique @default("store-name-slug")
  media                 Media[]
  reviews               Review[]
  profile               Profile                @relation("SellerProfile", fields: [profileId], references: [id])
  verificationDocuments VerificationDocument[]
}

model VerificationDocument {
  id              String             @id @default(uuid()) @db.Uuid
  sellerProfileId String             @db.Uuid
  type            String
  url             String
  status          VerificationStatus @default(PENDING)
  created_at      DateTime           @default(now()) @db.Timestamptz(6)
  updated_at      DateTime           @updatedAt @db.Timestamptz(6)
  sellerProfile   SellerProfile      @relation(fields: [sellerProfileId], references: [id])
}

model Review {
  id              String         @id @default(uuid()) @db.Uuid
  userId          String         @db.Uuid
  productId       Int
  sellerProfileId String         @db.Uuid
  rating          Int
  comment         String?
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  notifications   Notification[] @relation("NotificationToReview")
  product         Products       @relation(fields: [productId], references: [id])
  sellerProfile   SellerProfile  @relation(fields: [sellerProfileId], references: [id])
  user            Profile        @relation("UserReviews", fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Products {
  id            Int                 @id @default(autoincrement())
  title         String
  slug          String              @unique
  description   String?
  price         Float
  discount      Float?
  status        ProductStatus?      @default(DRAFT)
  sellerId      String              @db.Uuid
  store_name    String
  created_at    DateTime            @default(now()) @db.Timestamptz(6)
  updated_at    DateTime            @updatedAt @db.Timestamptz(6)
  likes         Like[]
  measurement   Measurement?
  media         Media[]
  notifications Notification[]      @relation("NotificationToProduct")
  orderItem     OrderItem[]
  category      ProductCategories[] @relation("ProductCategory")
  tags          ProductTags[]       @relation("ProductTag")
  variants      ProductVariant[]
  seller        Profile             @relation("SellerProducts", fields: [sellerId], references: [id])
  reviews       Review[]
  share         Share[]             @relation("ProductShare")
  socialMedia   SocialMediaInfo[]   @relation("ProductSocialMedia")
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  size      String
  stock     Int
  price     Float?
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  @@unique([productId, size])
}

model Measurement {
  id        Int       @id @default(autoincrement())
  productId Int?      @unique
  weight    Float?
  length    Float?
  width     Float?
  height    Float?
  product   Products? @relation(fields: [productId], references: [id])
}

model Media {
  id         Int           @id @default(autoincrement())
  url        String
  type       MediaType
  productId  Int
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  sellerId   String        @db.Uuid
  product    Products      @relation(fields: [productId], references: [id])
  seller     SellerProfile @relation(fields: [sellerId], references: [id])
}

model Category {
  id              Int                 @id @default(autoincrement())
  name            String              @unique
  thumbnailCatUrl String?
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  updated_at      DateTime            @updatedAt @db.Timestamptz(6)
  slug            String              @unique @default("category-slug")
  products        ProductCategories[] @relation("ProductCategory")
}

model ProductCategories {
  productId  Int
  categoryId Int
  category   Category @relation("ProductCategory", fields: [categoryId], references: [id])
  product    Products @relation("ProductCategory", fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model Tag {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  updated_at DateTime      @updatedAt @db.Timestamptz(6)
  products   ProductTags[] @relation("ProductTag")
}

model ProductTags {
  productId Int
  tagId     Int
  product   Products @relation("ProductTag", fields: [productId], references: [id])
  tag       Tag      @relation("ProductTag", fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model Orders {
  id            Int            @id @default(autoincrement())
  userId        String         @db.Uuid
  stripeId      String         @unique
  name          String
  address       String
  zipcode       String
  city          String
  country       String
  totalAmount   Int
  status        OrderStatus    @default(PENDING)
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @updatedAt @db.Timestamptz(6)
  notifications Notification[] @relation("NotificationToOrder")
  orderItem     OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)
  order      Orders   @relation(fields: [orderId], references: [id])
  product    Products @relation(fields: [productId], references: [id])
}

model Addresses {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @db.Uuid
  name       String
  address    String
  zipcode    String
  city       String
  country    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  productId  Int
  created_at DateTime @default(now())
  product    Products @relation(fields: [productId], references: [id])
  profile    Profile  @relation("ProfileLikes", fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Share {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  productId  Int
  platform   String?
  shareUrl   String?
  created_at DateTime @default(now())
  product    Products @relation("ProductShare", fields: [productId], references: [id])
  profile    Profile  @relation("ProfileShares", fields: [userId], references: [id])

  @@unique([userId, productId, platform])
}

model SocialMediaInfo {
  id         Int       @id @default(autoincrement())
  userId     String?   @db.Uuid
  productId  Int?
  platform   String
  handle     String
  created_at DateTime  @default(now())
  product    Products? @relation("ProductSocialMedia", fields: [productId], references: [id])
  profile    Profile?  @relation("ProfileSocialMedia", fields: [userId], references: [id])
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     String           @db.Uuid
  message    String
  type       NotificationType
  read       Boolean          @default(false)
  orderId    Int?
  reviewId   String?          @db.Uuid
  productId  Int?
  created_at DateTime         @default(now()) @db.Timestamptz(6)
  updated_at DateTime         @updatedAt @db.Timestamptz(6)
  order      Orders?          @relation("NotificationToOrder", fields: [orderId], references: [id])
  product    Products?        @relation("NotificationToProduct", fields: [productId], references: [id])
  review     Review?          @relation("NotificationToReview", fields: [reviewId], references: [id])
  profile    Profile          @relation("NotificationToProfile", fields: [userId], references: [id])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum NotificationType {
  ORDER
  REVIEW
  PRODUCT
  GENERAL
}
