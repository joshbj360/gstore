generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  COMPLETED
  SHIPPED
  DELIVERED
  RETURNED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum NotificationType {
  ORDER
  REVIEW
  PRODUCT
  GENERAL
  NEW_COMMENT
  COMMENT_LIKE
  REPLY
  PRODUCT_SHARE
  NEW_FOLLOWER
  NEW_POST
  POST_LIKE
}

// --- CORE MODELS ---

model Profile {
  id                String           @id @db.Uuid
  email             String           @unique
  role              String           @default("user")
  avatar            String?
  username          String?
  created_at        DateTime         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime         @updatedAt @db.Timestamptz(6)
  
  // Relations
  sellerProfile     SellerProfile?   @relation("SellerProfile")
  media             Media[]          @relation("MediaAuthor")
  orders            Orders[]         @relation("BuyerOrders")
  cartItems         CartItem[]
  addresses         Addresses?       @relation("UserAddress")
  
  // Social Relations
  likes             Like[]           @relation("ProfileLikes")
  commentLikes      CommentLike[]    @relation("UserCommentLikes")
  postLikes         PostLike[]       @relation("UserProfileLikes")
  comments          Comment[]        @relation("UserComments")
  posts             Post[]           @relation("UserPosts")
  stories           Story[]          @relation("UserStories")
  following         Follow[]         @relation("Following")
  shares            Share[]          @relation("ProfileShares")
  socialMedia       SocialMediaInfo[] @relation("ProfileSocialMedia")
  
  // Notification Relations
  notifications     Notification[]   @relation("NotificationToProfile")
  sentNotifications Notification[]   @relation("NotificationFromActor")
}

model SellerProfile {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId               String                @unique @db.Uuid
  store_name              String?
  store_description       String?
  store_logo              String?
  store_banner            String?
  store_location          String?
  store_phone             String?
  store_website           String?
  store_socials           Json?
  followers_count         Int                   @default(0)
  is_verified             Boolean               @default(false)
  verification_status     VerificationStatus    @default(PENDING)
  verification_reason     String?
  created_at              DateTime              @default(now()) @db.Timestamptz(6)
  updated_at              DateTime              @updatedAt @db.Timestamptz(6)
  store_slug              String                @unique
  
  
  // Relations
  profile                 Profile               @relation("SellerProfile", fields: [profileId], references: [id])
  products                Products[]            @relation("SellerProducts")
  media                   Media[]               @relation("MediaSeller")
  shippingZones           ShippingZone[]
  verificationDocuments   VerificationDocument[]
  wallet                  SellerWallet?
  followers               Follow[]              @relation("Followers")
}

model Products {
  id               Int                 @id @default(autoincrement())
  title            String
  slug             String              @unique
  description      String?
  price            Float
  discount         Float?
  status           ProductStatus?      @default(DRAFT)
  sellerId         String              @db.Uuid
  store_slug       String
  shippingZoneId   String?             @db.Uuid
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @updatedAt @db.Timestamptz(6)
  
  // Flags for discovery
  isFeatured       Boolean             @default(false)
  bannerImageUrl   String?
  isAccessory      Boolean             @default(false)
  SKU              String?             @unique
  
  // Aggregated data
  soldCount        Int                 @default(0)
  averageRating    Float?
  totalReviews     Int                 @default(0)
  
  // Relations
  seller           SellerProfile       @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  shippingZone     ShippingZone?       @relation(fields: [shippingZoneId], references: [id], onDelete: SetNull)
  variants         ProductVariant[]
  media            Media[]
  category         ProductCategories[] @relation("ProductCategory")
  tags             ProductTags[]       @relation("ProductTag")
  measurement      Measurement?
  
  // Social Relations
  likes            Like[]
  comments         Comment[]
  stories          Story[]
  shares           Share[]             @relation("ProductShare")
  socialMedia      SocialMediaInfo[]   @relation("ProductSocialMedia")
  taggedInPosts    ProductPostTag[]
  styledWith       ProductRelation[]   @relation("StyledWith")
  appearsIn        ProductRelation[]   @relation("AppearsIn")
  notifications    Notification[]      @relation("NotificationToProduct")
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  size       String
  stock      Int
  price      Float?
  productId  Int
  product    Products    @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, size])
}


// --- E-COMMERCE MODELS ---

model Orders {
  id                  Int            @id @default(autoincrement())
  userId              String         @db.Uuid
  stripeId            String         @unique
  name                String
  address             String
  zipcode             String
  county              String // used as local gov
  country             String
  totalAmount         Int
  paymentMethod       String
  trackingNumber      String?
  shipper             String?
  payoutAmount        Int?
  status              OrderStatus    @default(PENDING)
  created_at          DateTime       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime       @updatedAt @db.Timestamptz(6)
  
  user                Profile        @relation("BuyerOrders", fields: [userId], references: [id])
  orderItem           OrderItem[]
  notifications       Notification[] @relation("NotificationToOrder")
}

model OrderItem {
  id         Int            @id @default(autoincrement())
  orderId    Int
  variantId  Int
  quantity   Int
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  
  order      Orders         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant    ProductVariant @relation(fields: [variantId], references: [id])
}

model CartItem {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity   Int
  created_at DateTime       @default(now())
  userId     String         @db.Uuid
  variantId  Int
  
  user       Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant    ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
}

model Addresses {
  id                  Int      @id @default(autoincrement())
  userId              String   @unique @db.Uuid
  name                String
  address             String
  zipcode             String
  country             String
  county              String
  phone               String
  state               String
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @updatedAt @db.Timestamptz(6)
  
  user                Profile  @relation("UserAddress", fields: [userId], references: [id], onDelete: Cascade)
}


// --- SHIPPING & WALLET MODELS ---

model ShippingZone {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  sellerId   String        @db.Uuid
  isDefault  Boolean       @default(false)
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  updated_at DateTime      @updatedAt @db.Timestamptz(6)
  
  seller     SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  products   Products[]
  rates      ZoneRate[]

  @@unique([sellerId, name])
}

model ZoneRate {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  zoneId    String       @db.Uuid
  cost      Float
  countries String[]
  states    String[]
  
  zone      ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
}

model SellerWallet {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerId        String        @unique @db.Uuid
  balance         Float         @default(0)
  pending_balance Float         @default(0)
  updated_at      DateTime      @updatedAt
  
  seller          SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  payouts         Payout[]
  transactions    Transaction[]
}

model Transaction {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletId    String      @db.Uuid
  amount      Float
  type        String
  orderId     Int?
  description String
  created_at  DateTime     @default(now())
  
  wallet      SellerWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Payout {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletId        String       @db.Uuid
  amount          Float
  status          String
  bank_account    Json
  transaction_ref String?
  requested_at    DateTime     @default(now())
  completed_at    DateTime?
  
  wallet          SellerWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}


// --- SOCIAL & ENGAGEMENT MODELS ---

model Story {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mediaId    String        @unique @db.Uuid
  authorId   String        @db.Uuid
  productId  Int?
  expiresAt  DateTime
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  author     Profile       @relation("UserStories", fields: [authorId], references: [id], onDelete: Cascade)
  product    Products?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  media      Media         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Post {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId   String   @db.Uuid
  caption    String?
  mediaId    String   @unique @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  author         Profile          @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  media          Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  taggedProducts ProductPostTag[]
  likes          PostLike[]
}

model Comment {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text          String
  authorId      String         @db.Uuid
  productId     Int
  parentId      String?        @db.Uuid
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  
  author        Profile        @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  product       Products       @relation(fields: [productId], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction)
  replies       Comment[]      @relation("Replies")
  likes         CommentLike[]
  notifications Notification[] @relation("NotificationToComment")
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  productId  Int
  created_at DateTime @default(now())
  
  product    Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  profile    Profile  @relation("ProfileLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model CommentLike {
  userId    String  @db.Uuid
  commentId String  @db.Uuid
  
  user      Profile @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model PostLike {
  userId String @db.Uuid
  postId String @db.Uuid
  
  user   Profile @relation("UserProfileLikes", fields: [userId], references: [id], onDelete: Cascade)
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Follow {
  followerId  String        @db.Uuid
  followingId String        @db.Uuid
  created_at  DateTime      @default(now())
  
  follower    Profile       @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   SellerProfile @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Share {
  id         Int      @id @default(autoincrement())
  userId     String   @db.Uuid
  productId  Int
  platform   String?
  shareUrl   String?
  created_at DateTime @default(now())
  
  product    Products @relation("ProductShare", fields: [productId], references: [id], onDelete: Cascade)
  profile    Profile  @relation("ProfileShares", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, platform])
}


// --- CONTENT & UTILITY MODELS ---

// DEFINITION ADDED
model Media {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url        String
  public_id  String?       @unique
  type       MediaType
  productId  Int?
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  altText    String?
  metadata   Json?
  authorId   String        @db.Uuid
  author     Profile       @relation("MediaAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  product    Products?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  sellerId   String?       @db.Uuid // This field is now optional
  seller     SellerProfile? @relation("MediaSeller", fields: [sellerId], references: [id], onDelete: SetNull)
  story      Story?
  post       Post?
}

// DEFINITION ADDED
model Category {
  id              Int                 @id @default(autoincrement())
  name            String              @unique
  thumbnailCatUrl String?
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  updated_at      DateTime            @updatedAt @db.Timestamptz(6)
  slug            String              @unique
  products        ProductCategories[] @relation("ProductCategory")
}

// DEFINITION ADDED
model Tag {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  updated_at DateTime      @updatedAt @db.Timestamptz(6)
  products   ProductTags[] @relation("ProductTag")
}

model Measurement {
  id        Int       @id @default(autoincrement())
  productId Int?      @unique
  weight    Float?
  length    Float?
  width     Float?
  height    Float?
  
  product   Products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model VerificationDocument {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sellerProfileId String             @db.Uuid
  type            String
  url             String
  status          VerificationStatus @default(PENDING)
  created_at      DateTime           @default(now()) @db.Timestamptz(6)
  updated_at      DateTime           @updatedAt @db.Timestamptz(6)
  
  sellerProfile   SellerProfile      @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     String           @db.Uuid
  actorId    String?          @db.Uuid
  message    String
  type       NotificationType
  read       Boolean          @default(false)
  created_at DateTime         @default(now()) @db.Timestamptz(6)
  updated_at DateTime         @updatedAt @db.Timestamptz(6)
  
  // Relations
  profile    Profile          @relation("NotificationToProfile", fields: [userId], references: [id])
  actor      Profile?         @relation("NotificationFromActor", fields: [actorId], references: [id])
  orderId    Int?
  order      Orders?          @relation("NotificationToOrder", fields: [orderId], references: [id])
  productId  Int?
  product    Products?        @relation("NotificationToProduct", fields: [productId], references: [id])
  commentId  String?          @db.Uuid
  comment    Comment?         @relation("NotificationToComment", fields: [commentId], references: [id])
}

model SocialMediaInfo {
  id         Int       @id @default(autoincrement())
  userId     String?   @db.Uuid
  productId  Int?
  platform   String
  handle     String
  created_at DateTime  @default(now())
  
  product    Products? @relation("ProductSocialMedia", fields: [productId], references: [id], onDelete: Cascade)
  profile    Profile?  @relation("ProfileSocialMedia", fields: [userId], references: [id], onDelete: Cascade)
}


// --- JOIN TABLES ---

model ProductCategories {
  productId  Int
  categoryId Int
  
  category   Category @relation("ProductCategory", fields: [categoryId], references: [id], onDelete: Cascade)
  product    Products @relation("ProductCategory", fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductTags {
  productId Int
  tagId     Int
  
  product   Products @relation("ProductTag", fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation("ProductTag", fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
}

model ProductRelation {
  styledWithId Int
  appearsInId  Int
  
  appearsIn    Products @relation("AppearsIn", fields: [appearsInId], references: [id], onDelete: Cascade)
  styledWith   Products @relation("StyledWith", fields: [styledWithId], references: [id], onDelete: Cascade)

  @@id([styledWithId, appearsInId])
}

model ProductPostTag {
  postId    String  @db.Uuid
  productId Int
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([postId, productId])
}

